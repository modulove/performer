// Generated by svg2performer.py
// Source: keyboard icon.svg
// Original size: 36x36 (from viewBox 0 0 15 15)
// Scalable vector graphics

#pragma once

#include "../../../../core/gfx/Canvas.h"

class KeyboardIconGraphic {
public:
    static constexpr int WIDTH = 100;
    static constexpr int HEIGHT = 100;

    // Draw at position with optional scale (s)
    // x, y = top-left position
    // s = scale factor (1.0 = original size)
    static void draw(Canvas &canvas, int x = 0, int y = 0, float s = 1.0f) {
        canvas.setColor(Color::Bright);

        // Path
        canvas.line(x + 43.672*s, y + 7.803*s, x + 43.672*s, y + 40.52*s);
        canvas.line(x + 43.672*s, y + 40.52*s, x + 9.365*s, y + 42.111*s);
        canvas.line(x + 9.365*s, y + 42.111*s, x + 7.774*s, y + 7.803*s);
        canvas.line(x + 7.774*s, y + 7.803*s, x + 42.082*s, y + 6.213*s);
        canvas.line(x + 42.082*s, y + 6.213*s, x + 43.672*s, y + 7.803*s);
        canvas.line(x + 40.807*s, y + 40.377*s, x + 41.938*s, y + 9.131*s);
        canvas.line(x + 41.938*s, y + 9.131*s, x + 10.64*s, y + 7.947*s);
        canvas.line(x + 10.64*s, y + 7.947*s, x + 9.508*s, y + 39.193*s);
        canvas.line(x + 9.508*s, y + 39.193*s, x + 40.807*s, y + 40.377*s);
        canvas.line(x + 31.883*s, y + 27.76*s, x + 34.342*s, y + 27.76*s);
        canvas.line(x + 34.342*s, y + 27.76*s, x + 34.908*s, y + 10.315*s);
        canvas.line(x + 34.908*s, y + 10.315*s, x + 39.675*s, y + 10.315*s);
        canvas.line(x + 39.675*s, y + 10.315*s, x + 39.675*s, y + 38.009*s);
        canvas.line(x + 39.675*s, y + 38.009*s, x + 31.883*s, y + 38.009*s);
        canvas.line(x + 31.883*s, y + 38.009*s, x + 31.883*s, y + 27.76*s);
        canvas.line(x + 16.539*s, y + 10.315*s, x + 16.539*s, y + 27.168*s);
        canvas.line(x + 16.539*s, y + 27.168*s, x + 19.564*s, y + 27.76*s);
        canvas.line(x + 19.564*s, y + 27.76*s, x + 19.564*s, y + 38.009*s);
        canvas.line(x + 19.564*s, y + 38.009*s, x + 11.772*s, y + 38.009*s);
        canvas.line(x + 11.772*s, y + 38.009*s, x + 11.772*s, y + 10.315*s);
        canvas.line(x + 11.772*s, y + 10.315*s, x + 16.539*s, y + 10.315*s);
        canvas.line(x + 21.827*s, y + 27.76*s, x + 24.287*s, y + 27.76*s);
        canvas.line(x + 24.287*s, y + 27.76*s, x + 24.853*s, y + 10.315*s);
        canvas.line(x + 24.853*s, y + 10.315*s, x + 26.594*s, y + 10.315*s);
        canvas.line(x + 26.594*s, y + 10.315*s, x + 26.594*s, y + 27.168*s);
        canvas.line(x + 26.594*s, y + 27.168*s, x + 29.619*s, y + 27.76*s);
        canvas.line(x + 29.619*s, y + 27.76*s, x + 29.619*s, y + 38.009*s);
        canvas.line(x + 29.619*s, y + 38.009*s, x + 21.827*s, y + 38.009*s);
        canvas.line(x + 21.827*s, y + 38.009*s, x + 21.827*s, y + 27.76*s);
    }

    // Draw centered at position
    static void drawCentered(Canvas &canvas, int centerX, int centerY, float s = 1.0f) {
        int x = centerX - (WIDTH * s) / 2;
        int y = centerY - (HEIGHT * s) / 2;
        draw(canvas, x, y, s);
    }
};
