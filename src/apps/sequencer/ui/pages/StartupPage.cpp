#include "StartupPage.h"

#include "ui/pages/Pages.h"
#include "ui/pages/KeyboardIcon.h"

#include "model/FileManager.h"
#include "Config.h"

#include "os/os.h"

#include "core/math/Math.h"
#include "core/utils/StringBuilder.h"
#include <cmath>

static const unsigned char MDLV_LOGO[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0e, 0x00, 0x00, 0xe0,
	0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x1f, 0x00, 0x00, 0xf0,
	0x01, 0x00, 0x30, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x1b, 0x00, 0x00, 0xf8,
	0x01, 0x00, 0x38, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x33, 0xc0, 0x19, 0x00, 0x00, 0x9c,
	0x01, 0x00, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x39, 0xe0, 0x18, 0x00, 0x00, 0xcc,
	0x01, 0x00, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x39, 0x60, 0x1c, 0x00, 0x00, 0xce,
	0x01, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1d, 0x70, 0x0c, 0x00, 0x00, 0xe6,
	0x00, 0x00, 0x8c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1c, 0x38, 0x0e, 0x00, 0x00, 0xe7,
	0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0e, 0x18, 0x07, 0x00, 0x00, 0x73,
	0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x07, 0x9c, 0x03, 0x00, 0x80, 0x3b,
	0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0x8e, 0x03, 0x00, 0x80, 0x39,
	0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xce, 0x01, 0x00, 0xc0, 0x1d,
	0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0xe7, 0x00, 0x00, 0xc0, 0x0f,
	0x00, 0x80, 0x73, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x73, 0x00, 0x00, 0xc0, 0x0e,
	0x00, 0x80, 0x73, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x80, 0x3b, 0x00, 0x00, 0xe0, 0x07,
	0x00, 0x80, 0x39, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xc0, 0x1d, 0x00, 0x00, 0xe0, 0x03,
	0x00, 0x80, 0x19, 0x00, 0x00, 0x00, 0x80, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x38, 0xc0, 0x0f, 0x00, 0x00, 0xe0, 0x03,
	0x00, 0xc0, 0x1d, 0x00, 0x00, 0x00, 0xc0, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x1c, 0xe0, 0x07, 0x70, 0x00, 0xfe, 0x31,
	0x40, 0xc0, 0x0e, 0x7c, 0x60, 0xc0, 0xc3, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 0x1c, 0xe0, 0x03, 0xfc, 0x01, 0xff, 0x30,
	0xe0, 0xc0, 0x0e, 0xfe, 0x78, 0xe0, 0xe3, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x1e, 0xf0, 0x01, 0xde, 0xf1, 0xf7, 0x38,
	0x60, 0xe0, 0x07, 0xef, 0x7c, 0x70, 0x77, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x1f, 0x78, 0x00, 0x86, 0xff, 0x7b, 0x18,
	0x70, 0xe0, 0x03, 0xc7, 0x3f, 0x38, 0xbe, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x80, 0x3b, 0x3c, 0x00, 0xfe, 0xff, 0x79, 0x1c,
	0x30, 0xe0, 0x01, 0xc7, 0x3f, 0x38, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0xf1, 0x3f, 0x00, 0xfc, 0x7f, 0x38, 0x1c,
	0x38, 0xf0, 0x01, 0xc7, 0x1b, 0x1c, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0xf1, 0x1f, 0x80, 0x80, 0x3d, 0x1c, 0x0c,
	0x38, 0xf0, 0x40, 0xfe, 0x19, 0x1c, 0x0c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xe0, 0xc0, 0x1c, 0xc0, 0x81, 0x1d, 0x1c, 0x0e,
	0x1c, 0x70, 0xe0, 0xfc, 0x1d, 0x0c, 0x0e, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x70, 0x00, 0x1c, 0xc0, 0xc1, 0x0f, 0x0c, 0x06,
	0x1c, 0x70, 0x60, 0xd0, 0x1d, 0x0e, 0x06, 0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x38, 0x00, 0x0c, 0xe0, 0xc0, 0x07, 0x0e, 0x07,
	0x0e, 0x38, 0x70, 0xc0, 0x0c, 0x06, 0x06, 0x00, 0x38, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x1c, 0x00, 0x0c, 0x60, 0xc0, 0x07, 0x0e, 0x07,
	0x0e, 0x38, 0x30, 0xc0, 0x0c, 0x07, 0x07, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x70, 0xc0, 0x03, 0x0f, 0x03,
	0x0f, 0x1c, 0x38, 0xc0, 0x0c, 0x07, 0x07, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x07, 0x00, 0x0e, 0x30, 0xe0, 0x03, 0x87, 0x03,
	0x07, 0x1e, 0x38, 0xe0, 0x0c, 0x03, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x80, 0x03, 0x00, 0x0e, 0x38, 0xe0, 0x03, 0x87, 0x83,
	0x07, 0x0f, 0x3c, 0x60, 0x8c, 0x03, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0x03, 0x00, 0x0e, 0x1c, 0xf0, 0x83, 0xc7, 0x83,
	0x07, 0x0f, 0x1c, 0x60, 0x8c, 0x03, 0x07, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xe0, 0x01, 0x00, 0x0e, 0x1e, 0xf0, 0x81, 0xc7, 0xc3,
	0x83, 0x0f, 0x3e, 0x70, 0x8c, 0x01, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xf0, 0x00, 0x00, 0x0e, 0x1f, 0xb8, 0xc1, 0xe7, 0xc1,
	0xc3, 0x0f, 0x3f, 0x30, 0xcc, 0x01, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x38, 0x00, 0x00, 0x0e, 0x1f, 0x98, 0xe1, 0xf7, 0xe3,
	0xc3, 0x0f, 0x3f, 0x38, 0xdc, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1e, 0x00, 0x00, 0x8c, 0x3b, 0x9c, 0xf1, 0xf7, 0x73,
	0xe3, 0x8c, 0x73, 0x1c, 0xd8, 0x00, 0x1e, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0xfc, 0xf9, 0x8f, 0x7f, 0x3f, 0x3f,
	0x7f, 0xfc, 0xf1, 0x1f, 0xf8, 0x00, 0x7c, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0xf8, 0xf0, 0x07, 0x1f, 0x1e, 0x3f,
	0x3f, 0xf8, 0xe0, 0x0f, 0x78, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x70, 0xc0, 0x01, 0x0e, 0x0c, 0x0c,
	0x0e, 0x70, 0x80, 0x03, 0x20, 0x00, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

StartupPage::StartupPage(PageManager &manager, PageContext &context) :
    BasePage(manager, context)
{
    _startTicks = os::ticks();
}

void StartupPage::draw(Canvas &canvas) {
    if (_state == State::Initial) {
        _state = State::Loading;
        _engine.suspend();
        FileManager::task([this] () {
            return FileManager::readLastProject(_model.project());
        }, [this] (fs::Error result) {
            _engine.resume();
            _state = State::Ready;
        });
    }

    if (relTime() > 1.5f && _state == State::Ready) {
        close();
    }

    // Clear screen
    canvas.setBlendMode(BlendMode::Set);
    canvas.setColor(Color::None);
    canvas.fill();

    float t = relTime();
    float fadeIn = clamp(t * 2.0f, 0.0f, 1.0f);

    // Version number at top
    if (t > 0.05f) {
        canvas.setBlendMode(BlendMode::Set);
        Color versionColor = fadeIn > 0.6f ? Color::Medium : Color::Low;
        canvas.setColor(versionColor);
        canvas.setFont(Font::Tiny);
        FixedStringBuilder<16> versionStr("v%d.%d.%d", CONFIG_VERSION_MAJOR, CONFIG_VERSION_MINOR, CONFIG_VERSION_REVISION);
        canvas.drawText(4, 4, versionStr);
    }

    // PEW|FORMER logo centered (converted from SVG)
    // Logo width: 87px, height: 18px
    if (t > 0.1f) {
        canvas.setBlendMode(BlendMode::Set);
        Color logoColor = fadeIn > 0.6f ? Color::Bright : Color::Medium;

        // Center logo: (256 - 87) / 2 = 84.5, use 85
        int logoX = 85;
        int logoY = 23;
        drawPewFormerLogo(canvas, logoX, logoY, logoColor);

        // Space invaders on either side (3 left, 3 right)
        // Scale 2 makes them 16x16, logo is 18px tall - good match!
        int invaderScale = 2;
        int invaderSpacing = 20;

        // Left side invaders
        for (int i = 0; i < 3; ++i) {
            int xPos = logoX - 40 - (i * invaderSpacing);
            // Odd/even bobbing: even index bob down, odd index bob up
            int bobOffset = int(std::sin(t * 3.0f + (i % 2) * 3.14159f) * 3.0f);
            drawSpaceInvader(canvas, xPos, logoY + bobOffset, i % 3, invaderScale);
        }

        // Right side invaders
        for (int i = 0; i < 3; ++i) {
            int xPos = logoX + 87 + 24 + (i * invaderSpacing);
            // Odd/even bobbing: opposite phase from left side
            int bobOffset = int(std::sin(t * 3.0f + ((i + 1) % 2) * 3.14159f) * 3.0f);
            drawSpaceInvader(canvas, xPos, logoY + bobOffset, i % 3, invaderScale);
        }
    }

    // Modulove & Phazerville credit below logo with hearts
    if (t > 0.2f) {
        canvas.setBlendMode(BlendMode::Set);
        Color creditColor = fadeIn > 0.7f ? Color::Medium : Color::Low;
        canvas.setColor(creditColor);
        canvas.setFont(Font::Tiny);

        // Draw text parts separately so we can insert heart symbols
        const char *part1 = "WESTLICHT";
        const char *part2 = "MODULOVE";
        const char *part3 = "PHAZERVILLE";

        int part1Width = canvas.textWidth(part1);
        int part2Width = canvas.textWidth(part2);
        int part3Width = canvas.textWidth(part3);
        int heartWidth = 9;  // Width of larger heart symbol
        int spacing = 3;     // Space around hearts

        int totalWidth = part1Width + spacing + heartWidth + spacing + part2Width + spacing + heartWidth + spacing + part3Width;
        int startX = (Width - totalWidth) / 2;

        // WESTLICHT
        canvas.drawText(startX, 45, part1);  // Below logo
        startX += part1Width + spacing;

        // Heart 1 (y-4 to align with text baseline)
        drawHeart(canvas, startX, 41, creditColor);
        startX += heartWidth + spacing;

        // MODULOVE
        canvas.drawText(startX, 45, part2);
        startX += part2Width + spacing;

        // Heart 2 (y-4 to align with text baseline)
        drawHeart(canvas, startX, 41, creditColor);
        startX += heartWidth + spacing;

        // PHAZERVILLE
        canvas.drawText(startX, 45, part3);
    }

    // Loading progress bar at very bottom (no glitches)
    if (t > 0.5f && _state == State::Loading) {
        canvas.setBlendMode(BlendMode::Set);
        canvas.setColor(Color::Bright);
        int w = std::min(Width, int(std::floor((t - 0.5f) / 1.0f * Width)));
        canvas.hline(0, 63, w);  // Single pixel line at bottom edge
    }
}

void StartupPage::drawPewFormerLogo(Canvas &canvas, int x, int y, Color color) {
    canvas.setColor(color);
    // Converted from SVG - 87px × 18px (45 rectangles)

    canvas.fillRect(x + 0, y + 4, 2, 2);
    canvas.fillRect(x + 2, y + 4, 2, 11);
    canvas.fillRect(x + 2, y + 4, 5, 2);
    canvas.fillRect(x + 2, y + 7, 5, 2);
    canvas.fillRect(x + 7, y + 4, 2, 5);
    canvas.fillRect(x + 12, y + 4, 2, 11);
    canvas.fillRect(x + 12, y + 4, 5, 2);
    canvas.fillRect(x + 12, y + 8, 5, 2);
    canvas.fillRect(x + 12, y + 13, 5, 2);
    canvas.fillRect(x + 19, y + 4, 2, 11);
    canvas.fillRect(x + 20, y + 13, 2, 2);
    canvas.fillRect(x + 22, y + 10, 2, 5);
    canvas.fillRect(x + 24, y + 13, 2, 2);
    canvas.fillRect(x + 26, y + 4, 2, 11);
    canvas.fillRect(x + 30, y + 0, 1, 14);
    canvas.fillRect(x + 31, y + 4, 1, 14);
    canvas.fillRect(x + 35, y + 4, 2, 11);
    canvas.fillRect(x + 35, y + 4, 5, 2);
    canvas.fillRect(x + 35, y + 8, 5, 2);
    canvas.fillRect(x + 42, y + 4, 5, 2);
    canvas.fillRect(x + 42, y + 4, 2, 11);
    canvas.fillRect(x + 42, y + 13, 5, 2);
    canvas.fillRect(x + 46, y + 4, 2, 11);
    canvas.fillRect(x + 50, y + 4, 2, 11);
    canvas.fillRect(x + 50, y + 4, 5, 2);
    canvas.fillRect(x + 50, y + 7, 5, 2);
    canvas.fillRect(x + 54, y + 9, 2, 2);
    canvas.fillRect(x + 55, y + 4, 2, 5);
    canvas.fillRect(x + 55, y + 11, 2, 4);
    canvas.fillRect(x + 60, y + 4, 2, 11);
    canvas.fillRect(x + 61, y + 4, 2, 4);
    canvas.fillRect(x + 63, y + 7, 2, 4);
    canvas.fillRect(x + 65, y + 4, 2, 4);
    canvas.fillRect(x + 67, y + 4, 2, 11);
    canvas.fillRect(x + 71, y + 4, 2, 11);
    canvas.fillRect(x + 71, y + 4, 5, 2);
    canvas.fillRect(x + 71, y + 8, 5, 2);
    canvas.fillRect(x + 71, y + 13, 5, 2);
    canvas.fillRect(x + 78, y + 4, 2, 11);
    canvas.fillRect(x + 78, y + 4, 5, 2);
    canvas.fillRect(x + 78, y + 7, 5, 2);
    canvas.fillRect(x + 82, y + 9, 2, 4);
    canvas.fillRect(x + 83, y + 4, 2, 5);
    canvas.fillRect(x + 83, y + 13, 2, 2);
    canvas.fillRect(x + 85, y + 4, 2, 2);
}

void StartupPage::drawSpaceInvader(Canvas &canvas, int x, int y, int type, int scale) {
    // Classic Space Invaders pixel art (8x8)
    // Three different invader types
    // Scale parameter allows 1x, 2x, 3x, etc.

    static const uint8_t invader0[] = {
        0b00011000,
        0b00111100,
        0b01111110,
        0b11011011,
        0b11111111,
        0b00100100,
        0b01011010,
        0b10100101
    };

    static const uint8_t invader1[] = {
        0b00100100,
        0b00100100,
        0b01111110,
        0b11011011,
        0b11111111,
        0b11111111,
        0b10100101,
        0b00100100
    };

    static const uint8_t invader2[] = {
        0b00111100,
        0b01111110,
        0b11011011,
        0b11111111,
        0b01111110,
        0b00100100,
        0b01000010,
        0b10000001
    };

    const uint8_t *pattern = (type == 1) ? invader1 : (type == 2) ? invader2 : invader0;

    // Draw the invader pixel by pixel with scaling
    for (int row = 0; row < 8; ++row) {
        uint8_t rowData = pattern[row];
        for (int col = 0; col < 8; ++col) {
            if (rowData & (1 << (7 - col))) {
                canvas.fillRect(x + col * scale, y + row * scale, scale, scale);
            }
        }
    }
}

void StartupPage::drawHeart(Canvas &canvas, int x, int y, Color color) {
    // Draw a larger pixel-art heart (9x8 pixels)
    // Pattern (scaled up):
    //  .###.###.
    //  #########
    //  #########
    //  .#######.
    //  ..#####..
    //  ...###...
    //  ....#....

    canvas.setColor(color);

    // Row 0: two bumps (3 pixels each)
    canvas.fillRect(x + 1, y, 3, 1);
    canvas.fillRect(x + 5, y, 3, 1);

    // Row 1: full width
    canvas.fillRect(x, y + 1, 9, 1);

    // Row 2: full width
    canvas.fillRect(x, y + 2, 9, 1);

    // Row 3: slightly narrower
    canvas.fillRect(x + 1, y + 3, 7, 1);

    // Row 4: middle narrower
    canvas.fillRect(x + 2, y + 4, 5, 1);

    // Row 5: even narrower
    canvas.fillRect(x + 3, y + 5, 3, 1);

    // Row 6: point at bottom
    canvas.fillRect(x + 4, y + 6, 1, 1);
}

void StartupPage::drawModuloveLogo(Canvas &canvas, float fade) {
    canvas.setBlendMode(BlendMode::Set);

    // Draw the full-screen 256x64px Modulove logo
    Color logoColor = fade > 0.7f ? Color::Bright : (fade > 0.4f ? Color::Medium : Color::Low);
    canvas.setColor(logoColor);
    canvas.drawBitmap1bit(0, 0, 256, 64, MDLV_LOGO);
}

void StartupPage::drawKeyboardIcon(Canvas &canvas, int x, int y, float fade) {
    // SVG-based keyboard icon
    // Scaled to 18x18 pixels to fit nicely in corner

    Color iconColor = fade > 0.7f ? Color::Bright : (fade > 0.4f ? Color::Medium : Color::Low);
    canvas.setColor(iconColor);

    // The original SVG is ~36x36, so scale to 0.5 for 18x18 display
    KeyboardIconGraphic::draw(canvas, x, y, 0.5f);
}

void StartupPage::updateLeds(Leds &leds) {
    leds.clear();

    int progress = std::floor(relTime() * 8.f);
    for (int i = 0; i < 8; ++i) {
        bool active = i <= progress;
        leds.set(MatrixMap::fromTrack(i), active, active);
        leds.set(MatrixMap::fromStep(i), active, active);
        leds.set(MatrixMap::fromStep(i + 8), active, active);
    }
}

float StartupPage::time() const {
    return (os::ticks() - _startTicks) / float(os::time::ms(1000));
}
