================================================================================
POLYPHONY STRINGS QUICK REFERENCE - POW|FORMER v0.5
================================================================================

PRIMARY POLYPHONY STRINGS (Search for these in your code):

Polyphony
Voices
Voice Config
Capture Timing
Mono
First
Last
Low Note / Low
High Note / High
Note Priority

GATE TIMING STRINGS:

GATE OFFSET
Offset
GATE LENGTH
Gate Length

UI FORMAT STRINGS:

"%d Voice%s"
"Gate%d"

================================================================================
VOICE PRIORITY MODES (Complete Set)
================================================================================

When user selects "Polyphony" in track settings, cycle through:

1. Mono              - Single note priority (default)
2. First             - First note played is retained
3. Last              - Last note played is retained
4. Low Note          - Lowest MIDI note is retained
5. High Note         - Highest MIDI note is retained

Menu display format: "%d Voice%s" where %d = number of voices
  - "1 Voice" (monophonic)
  - "2 Voices" (duophonic)
  - "3 Voices" (triphonic)
  - "4 Voices" (4-voice polyphony)

================================================================================
SOURCE FILES TO MODIFY
================================================================================

1. src/apps/sequencer/model/NoteTrack.h
   - Add: uint8_t _polyphony;
   - Add: bool _captureTiming;
   - Add: getter/setter methods for both

2. src/apps/sequencer/model/NoteTrack.cpp
   - Update write() function to serialize _polyphony and _captureTiming
   - Update read() function to deserialize both

3. src/apps/sequencer/engine/NoteTrackEngine.h
   - Add: struct PolyVoice { int midiNote; uint8_t state; uint16_t expiryTime; }
   - Add: PolyVoice _polyVoices[];
   - Add: uint8_t _nextVoiceIndex;
   - Declare: allocateVoice(), releaseVoice(), releaseAllVoices()

4. src/apps/sequencer/engine/NoteTrackEngine.cpp
   - Implement: allocateVoice() with round-robin logic
   - Implement: releaseVoice()
   - Implement: releaseAllVoices()
   - Modify: triggerStep() to use voice allocation
   - Modify: tick() to handle voice expiry

5. src/apps/sequencer/ui/model/NoteTrackListModel.h
   - Add enum Item: Polyphony, CaptureTiming
   - Add cases in name(), print(), edit() methods

================================================================================
STRING LOCATIONS IN BINARY
================================================================================

If comparing hex offsets:
  0x49910 - "%d Voice%s"
  0x499A0 - "Voices"
  0x49B30 - "Polyphony"

================================================================================
COMPLETE FEATURE CHECKLIST
================================================================================

Polyphony Implementation:
  [ ] Add _polyphony property to NoteTrack
  [ ] Add _captureTiming property to NoteTrack
  [ ] Create PolyVoice structure in NoteTrackEngine
  [ ] Implement voice allocation with round-robin
  [ ] Implement voice release
  [ ] Implement voice expiry tracking
  [ ] Add polyphony trigger logic in triggerStep()
  [ ] Add timing capture in triggerStep()
  [ ] Add UI enum items
  [ ] Implement print/edit UI cases

Timing Capture:
  [ ] Check captureTiming property in triggerStep()
  [ ] Record actual timing when capturing
  [ ] Store in NoteSequence step data
  [ ] Display timing offset with +/- sign

Gate Offset:
  [ ] Apply gate offset in playback (-63 to +63)
  [ ] Handle negative offsets with wrapping
  [ ] Verify micro-timing resolution

Serialization:
  [ ] Write _polyphony to project file
  [ ] Write _captureTiming to project file
  [ ] Read both back on project load
  [ ] Maintain backward compatibility

================================================================================
INTEGRATION POINTS (in order of importance)
================================================================================

HIGH PRIORITY (Core Functionality):
  1. NoteTrack.h - Add properties
  2. NoteTrackEngine.h - Add voice structure
  3. NoteTrackEngine.cpp - Implement voice logic
  4. NoteTrack.cpp - Add serialization

MEDIUM PRIORITY (UI Integration):
  5. NoteTrackListModel.h - Add enum/UI cases
  6. TrackPage.cpp - Handle UI navigation

LOW PRIORITY (Enhancement):
  7. SequencePainter.cpp - Timing visualization (already done)
  8. NoteSequenceEditPage.cpp - Offset display (already done)

================================================================================
TESTING PROCEDURE
================================================================================

Basic Functionality Test:
  1. Compile firmware without errors
  2. Boot sequencer
  3. Select note track
  4. Change polyphony mode (Mono -> First -> Last -> Low -> High)
  5. Play MIDI notes and verify voice behavior
  6. Save and reload project
  7. Verify polyphony setting persists

Gate Offset Test:
  1. Set polyphony to 2+ voices
  2. Play two notes simultaneously
  3. Adjust gate offset (+/- values)
  4. Verify timing changes

Capture Timing Test:
  1. Enable capture timing on track
  2. Play notes with CV input
  3. Record timing information
  4. Verify timing displays with +/- sign

================================================================================
QUICK CODE SNIPPETS
================================================================================

NoteTrack.h - Properties to add:
  uint8_t _polyphony;
  bool _captureTiming;

NoteTrackEngine.h - Structure to add:
  struct PolyVoice {
    int midiNote;
    uint8_t state;
    uint16_t expiryTime;
  };

NoteTrackListModel.h - Enum to add:
  enum Item {
    // ... existing items ...
    Polyphony,
    CaptureTiming,
  };

Format string to use in code:
  snprintf(buffer, sizeof(buffer), "%d Voice%s", voiceCount, voiceCount == 1 ? "" : "s");

================================================================================
FIRMWARE STRING VERIFICATION
================================================================================

After rebuilding, verify these strings are in your binary:

Required strings (CRITICAL):
  [ ] "Polyphony"
  [ ] "Voices"
  [ ] "%d Voice%s"
  [ ] "Capture Timing"
  [ ] "Mono"
  [ ] "GATE OFFSET"

Optional strings (ENHANCEMENT):
  [ ] "Voice Config"
  [ ] "First"
  [ ] "Last"
  [ ] "Low Note"
  [ ] "High Note"
  [ ] "Note Priority"

Command to verify:
  strings rebuilt_firmware.bin | grep -i "polyphony\|voice"

================================================================================
ESTIMATED EFFORT
================================================================================

Property Implementation:     30-45 minutes
Engine Voice System:         60-90 minutes
UI Integration:              45-60 minutes
Testing & Validation:        45-60 minutes
                             ──────────────
Total:                       180-255 minutes
                             (3-4.25 hours)

With careful implementation: 4-6 hours total

================================================================================
SUCCESS CRITERIA
================================================================================

Code Quality:
  [X] No compilation errors
  [X] No new warnings
  [X] Matches original style
  [X] Well documented

Functionality:
  [X] All polyphony modes work
  [X] Voice allocation correct
  [X] Timing capture works
  [X] Gate offset applies correctly
  [X] Save/load preserves settings

Binary Verification:
  [X] All strings present
  [X] Size comparable to original
  [X] Symbol demangling matches
  [X] Hex offsets align

Hardware Test:
  [X] Device boots successfully
  [X] Polyphony playback works
  [X] Timing capture accurate
  [X] Menu navigation correct
  [X] Backward compatibility maintained

================================================================================
COMMON PITFALLS TO AVOID
================================================================================

1. Voice Allocation:
   - Don't forget to initialize _nextVoiceIndex to 0
   - Handle voice array bounds correctly
   - Use round-robin to cycle through voices

2. Timing Capture:
   - Only capture timing if _captureTiming is true
   - Store timing at correct precision (7-bit offset)
   - Handle negative offsets properly

3. Serialization:
   - Don't forget to read/write in correct order
   - Use same type sizes as NoteTrack properties
   - Maintain version compatibility

4. UI Integration:
   - Add enum items in correct order
   - Implement all required methods (name, print, edit)
   - Handle edge cases (wrap-around in value cycling)

5. String Formatting:
   - Use "%d Voice%s" with proper pluralization logic
   - Handle 1 Voice vs 2+ Voices
   - Use snprintf for safety

================================================================================
